import numpy as np
import openmc
import ghastly
from jinja2 import Environment, PackageLoader
from ghastly import read_input
from ghastly import region
from lammps import lammps

env = Environment(loader=PackageLoader('ghastly', 'templates'))


def fill_core(input_file, rough_pf):
    '''
    This function uses OpenMC's model.pack_spheres function to "rough" pack
    the full core region defined by the Ghastly input file, then uses a series
    of Jinja templates to create a LAMMPS input file that will run a physics
    simulation, modeling not only the settling of the roughly packed pebbles
    due to gravtiy, but also handle the addtion of any extra pebbles needed to
    reach the target number of pebbles needed.

    Parameters
    ----------
    input_file : str
        Name of ghastly input file, which should be in JSON format, following
        the layout and parameter naming convention given in the example inputs.
    rough_pf : float
        Packing fraction used in OpenMC packing function.  Choosing a rough_pf
        greater than the target pf in the input file can result in overfilling
        of the core, and so it is reccommended to use a rough_pf that is
        less than or equal to the desired final pf.

    Returns
    -------
    While this function does not have a return at its completion, it will
    generate a number of files - both LAMMPS input files and files LAMMPS
    itself will generate.  For that reason, it's recommended that this be
    run inside its own directory, in order to keep these files organized.
    '''

    input_block = read_input.InputBlock(input_file)
    sim_block = input_block.create_obj()

    rough_pack = []
    match sim_block.down_flow:
        case True:
            pack_zones = sim_block.core_main | sim_block.core_outtake
        case False:
            pack_zones = sim_block.core_main | sim_block.core_intake

    for element in pack_zones.values():
        if type(element) == ghastly.core.CylCore:
            coords = pack_cyl(sim_block, element, rough_pf)
            rough_pack += coords
        else:
            pass

    # because pebbles will settle into the outtake region, the target number
    # of pebbles is calculated using an assumed 0.6 pf in the outtake region,
    # and the target pf in the main region
    outtake_vol = sum([i.volume for i in sim_block.core_outtake.values()])
    main_vol = sum([i.volume for i in sim_block.core_main.values()])
    n_pebbles = int(np.floor((0.60*outtake_vol)/sim_block.pebble_volume) +
                    np.floor((sim_block.pf*main_vol)/sim_block.pebble_volume))
    print("Equivalent number of pebbles is "+str(n_pebbles))

    pebbles_left = n_pebbles - len(rough_pack)

    if pebbles_left < 0:
        raise ValueError('''Negative pebbles left - core overfilled.  Reduce
                         rough_pf and try again.''')

    x_b, y_b, z_b = find_box_bounds(sim_block, pour=True)

    write_lammps_dump_file(rough_pack, "rough-pack.txt", "ff ff ff",
                           x_b, y_b, z_b)

    variable_filename = "pour_variables.txt"
    write_variable_block(variable_filename, input_block, sim_block)

    reg_files, reg_names = write_region_blocks(pack_zones)

    # now the main file:

    pour_filename = "pour_main_input.txt"
    write_pour_main(pour_filename, sim_block, variable_filename, x_b, y_b, z_b,
                    reg_files, reg_names, pebbles_left)



def pack_cyl(sim_block, element, rough_pf):
    '''
    Given a cylindrical core object, this function creates a corresponding
    OpenMC region, and the the pack_spheres function to generate a list of
    non-overlapping pebble centroids that fit within that region.

    Parameters
    ----------
    sim_block : ghastly Sim object
        Sim class object that contains simulation-specific simulation,
        read from input_file.
    element : ghastly CylCore object
        CylCore object for a portion of the core model.
    rough_pf : float
        Packing fraction that OpenMC will pack this cylinder to.  Not the
        same as the packing fraction in the input.

    Returns
    -------
    coords : list
        List of pebble centroid coordinates generated by OpenMC, within a
        cylindrical region matching the core element passed to pack_cyl.
    '''
    sides = openmc.ZCylinder(x0=element.x_c,
                             y0=element.y_c,
                             r=element.r)
    top = openmc.ZPlane(z0=element.z_max)
    bottom = openmc.ZPlane(z0=element.z_min)
    region_bounds = -sides & -top & +bottom

    coords = openmc.model.pack_spheres(sim_block.r_pebble,
                                       region=region_bounds,
                                       pf=rough_pf,
                                       contraction_rate=sim_block.k_rate)

    return list(coords)


def find_box_bounds(sim_block, pour=False):
    '''
    Using the core_zones contained in the sim_block, this function
    uses the dimensions of all core elements in the model to determine the
    appropriate size of the bounding box used in LAMMPS simulations.
    Note that when used to determine the bounding box for a simulation
    using the pour LAMMPS fix, the bounding box is extended in the
    positive z-direction, to allow for a temporary insertion region to
    be added.

    Parameters
    ----------
    sim_block : Sim object
        Sim object created from parameters in the input file for ghastly.
    pour : bool
        Default False.  Whether or not the LAMMPS simulation the bounds
        are being generated for is using the pour fix in LAMMPS.

    Returns
    -------
    x_b : dict
        Dictionary with key: value pairs giving the upper and lower
        bounds in the x-direction for the bounding box.
    y_b : dict
        As x_b, but for the y-direction.
    z_b : dict
        As x_b but for the z-direction.
    '''

    core_list = (sim_block.core_intake |
                 sim_block.core_main |
                 sim_block.core_outtake)
    x_list = []
    y_list = []
    z_list = []
    for element in core_list.values():
        z_list += [element.z_min, element.z_max]
        if type(element) == ghastly.core.CylCore:
            x_list += [(element.x_c - element.r),
                       (element.x_c + element.r)]
            y_list += [(element.y_c - element.r),
                       (element.y_c + element.r)]
        elif type(element) == ghastly.core.ConeCore:
            x_list += [(element.x_c - element.r_upper),
                       (element.x_c + element.r_upper),
                       (element.x_c - element.r_lower),
                       (element.x_c + element.r_lower)]
            y_list += [(element.y_c - element.r_upper),
                       (element.y_c + element.r_upper),
                       (element.y_c - element.r_lower),
                       (element.y_c + element.r_lower)]
    f = 1.05
    match pour:
        case True:
            f_zup = 1.2
        case _:
            f_zup = 1.05
    x_b = {"low": ((1-f)*element.x_c + f*min(x_list)),
           "up": ((1-f)*element.x_c + f*max(x_list))}
    y_b = {"low": ((1-f)*element.y_c + f*min(y_list)),
           "up": ((1-f)*element.y_c + f*max(y_list))}
    z_b = {"low": ((1-f)*0.5*(max(z_list)+min(z_list)) + f*min(z_list)),
           "up": ((1-f_zup)*0.5*(max(z_list)+min(z_list)) + f_zup*max(z_list))}

    return x_b, y_b, z_b


def write_lammps_dump_file(coords, dump_filename, bound_conds,
                           x_b, y_b, z_b):
    '''
    Using the coordinate array and simulation boundary conditions and
    dimentions, this function uses a jinja template
    to create a LAMMPS dumpfile that be read into LAMMPS.

    Parameters
    ----------
    coords : list
        List of pebble centroid coordinates.
    dump_filename : str
        Desired name of LAMMPS dumpfile created.  Please see LAMMPS read dump
        documentation for a full list of acceptable dump file types.
    bound_conds : str
        String providing the exact surface boundary conditions to be used
        in the LAMMPS bounding box.  See LAMMPS documentation for more
        information on bounding box conditions.
    x_b : dict
        Dictionary with key: value pairs giving the upper and lower
        bounds in the x-direction for the bounding box.
    y_b : dict
        As x_b, but for the y-direction.
    z_b : dict
        as x_b but for the z-direction.

    Returns
    -------
    dump_filename : file
        Generated file with the same name as dump_filename.
    '''

    pebble_coords = [{"id": i, "x": v[0], "y": v[1], "z": v[2]}
                     for i, v in enumerate(coords)]

    dump_template = env.get_template("dump_template.txt")
    dump_text = dump_template.render(n_rough_pack=len(coords),
                                     bound_conds=bound_conds,
                                     x_b=x_b,
                                     y_b=y_b,
                                     z_b=z_b,
                                     peb_list=pebble_coords)

    with open(dump_filename, mode='w') as f:
        f.write(dump_text)


def write_variable_block(variable_filename, input_block, sim_block):
    '''
    Create the file containing LAMMPS variables, which can later be included
    in a main LAMMPS input.

    Parameters
    ----------
    variable_filename : str
        The name of the variable block file to be created.
    input_block : Ghastly InputBlock object
        Ghastly object made from reading a Ghastly input file.
    sim_block : Ghastly Sim object
        Object containing simulation-specific information.

    Returns
    -------
    variable_filename : file
        Generated file with the same name as variable_filename.
    '''

    variables = input_block.lammps_var
    variables["r_pebble"] = sim_block.r_pebble
    variables["seed"] = sim_block.seed

    variables_template = env.get_template("variable_template.txt")
    variable_text = variables_template.render(variables=variables)
    with open(variable_filename, mode='w') as f:
        f.write(variable_text)


def write_region_blocks(core_zones):
    '''
    Creates region block LAMMPS files for each core element in the core zones
    passed to this function, which can be included in a main LAMMPS file.

    Parameters
    ----------
    core_zones : dict
        Dictionary with key:value pairs where each key is the name of a core
        element, and each value is a Ghastly Core object containing that
        element's parameters.

    Returns
    -------
    reg_files : list
        List of the filenames for each region block generated.
    reg_names : list
        List of the element names for each region block generated, which is
        used as the region's name in LAMMPS.
    '''
    reg_files = []
    reg_names = []
    for element_name, element in core_zones.items():
        reg_names.append(str(element_name))
        if type(element) == ghastly.core.CylCore:
            reg_template = env.get_template("cylcore_template.txt")
            reg_text = reg_template.render(region_name=element_name,
                                           x_c=element.x_c,
                                           y_c=element.y_c,
                                           r=element.r,
                                           z_min=element.z_min,
                                           z_max=element.z_max,
                                           open_bottom=element.open_bottom,
                                           open_top=element.open_top)
            reg_filename = str(element_name)+"_region.txt"
            reg_files.append(reg_filename)
            with open(reg_filename, mode='w') as f:
                f.write(reg_text)
        elif type(element) == ghastly.core.ConeCore:
            reg_template = env.get_template("conecore_template.txt")
            reg_text = reg_template.render(region_name=element_name,
                                           x_c=element.x_c,
                                           y_c=element.y_c,
                                           r_lower=element.r_lower,
                                           r_upper=element.r_upper,
                                           z_min=element.z_min,
                                           z_max=element.z_max,
                                           open_bottom=element.open_bottom,
                                           open_top=element.open_top)
            reg_filename = str(element_name)+"_region.txt"
            reg_files.append(reg_filename)
            with open(reg_filename, mode='w') as f:
                f.write(reg_text)

        else:
            raise TypeError(str(element_name)+" is not a CylCore or ConeCore.")

    return reg_files, reg_names


def write_settle_block(settle_filename, sim_block, reg_files, reg_names):
    '''
    Write lammps code block that adds the outtake region to the simulation
    and reverses gravity, allowing pebbles to settle upwards after pouring
    for upwards flowing systems.

    Parameters
    ----------
    settle_filename : str
        Name of the LAMMPS input file that will be created.
    sim_block : Ghastly Sim object
        Ghastly Sim object containing simulation-specific parameters.
        Generally created automatically from an input file.
    reg_files : list
        List of strings, where each string is the list of region files that
        have been created during the automatic input file creation process.
    reg_names : list
        List of strings, where each string is the ID of the region
        corresponding to the region file with the same index in reg_files.

    Returns
    -------
    settle_filename : file
        Generated file with the same name as settle_filename.
    '''

    out_reg_files, out_reg_names = write_region_blocks(sim_block.core_outtake)
    out_reg_names += reg_names

    settle_template = env.get_template("settle_template.txt")
    settle_text = settle_template.render(out_reg_files=out_reg_files,
                                         n_regions=len(out_reg_names),
                                         region_names=out_reg_names)

    with open(settle_filename, mode='w') as f:
        f.write(settle_text)


def write_pour_main(pour_filename, sim_block, variable_filename, x_b, y_b, z_b,
                    reg_files, reg_names, pebbles_left):
    '''
    Create the main LAMMPS file for pouring pebbles into the core.

    Parameters
    ----------
    pour_filename : str
        Name of the main pour file to be created.
    sim_block : Ghastly Sim object
        Sim class object with simulation-specific parameters.
    variable_filename : str
        Name of the file containing the LAMMPS variable block
    x_b : dict
        Dictionary with key: value pairs giving the upper and lower
        bounds in the x-direction for the bounding box.
    y_b : dict
        As x_b, but for the y-direction.
    z_b : dict
        as x_b but for the z-direction.
    reg_files : list
        A list of the filenames for the region blocks in LAMMPS.
    reg_names : list
        A list of the names of the regions used in LAMMPS.
    pebbles_left : int
        Number of pebbles that LAMMPS will be pouring.

    Returns
    -------
    pour_filename : file
        Generated file with the same name as pour_filename.
    '''

    main_core_z_max = max([(key, element.z_max)
                           for key, element in sim_block.core_main.items()])
    main_intake = sim_block.core_main[main_core_z_max[0]]

    x_c_pour = main_intake.x_c
    y_c_pour = main_intake.y_c
    z_max_pour = z_b["up"] - 0.01
    z_min_pour = main_core_z_max[1] + 0.01

    if type(main_intake) == ghastly.core.CylCore:
        r_pour = 0.75*main_intake.r
    elif type(main_intake) == ghastly.core.ConeCore:
        r_pour = 0.75*main_intake.r_upper

    match sim_block.down_flow:
        case True:
            settle = ""
        case _:
            write_settle_block("settle.txt", sim_block, reg_files, reg_names)
            settle = "include           settle.txt"

    main_template = env.get_template("pour_main.txt")
    main_text = main_template.render(variable_filename=variable_filename,
                                     x_b=x_b,
                                     y_b=y_b,
                                     z_b=z_b,
                                     region_files=reg_files,
                                     n_regions=len(reg_files),
                                     region_names=reg_names,
                                     x_c_pour=x_c_pour,
                                     y_c_pour=y_c_pour,
                                     r_pour=r_pour,
                                     z_min_pour=z_min_pour,
                                     z_max_pour=z_max_pour,
                                     pebbles_left=pebbles_left,
                                     settle=settle)

    pour_filename = "pour_main_input.txt"
    with open(pour_filename, mode='w') as f:
        f.write(main_text)
